#include <iostream>
#include <sys/types.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <string.h>
#include <string>

using namespace std;

int CSocket::SendTCPMessage(char* msg, int msg_size){
    return send(socket_fd, msg, msg_size, 0);
    }
int CSocket::ReceiveTCPMessage(char *buffer, int buffer_size){
    return recv(socket_fd, buffer, buffer_size, 0);
    }
    
int main()
{

    int appNum = 1; // current app number: 1
    int machineNum = 1; // current machine number: 1
    int machineCNum = 2;
    
    //	Create a socket
    int sock = socket(AF_INET, SOCK_STREAM, 0);
    if (sock == -1)
    {
        return 1;
    }

    //	Create a hint structure for the server we're connecting with
    int port = 54000;
    string ipAddress = "127.0.0.1";

    sockaddr_in hint;
    hint.sin_family = AF_INET;
    hint.sin_port = htons(port);
    inet_pton(AF_INET, ipAddress.c_str(), &hint.sin_addr);

    //	Connect to the server on the socket
    int connectRes = connect(sock, (sockaddr*)&hint, sizeof(hint));
    if (connectRes == -1)
    {
        return 1;
    }

    //	While loop:
    char buf[4096];
    string userInput;
    struct message 
    {
        message_type type;
        char payload[4096];
    };
    enum message_type {ADDR_INFO = 10};
    struct addr_info
    {
        int src_app = appNum;
        int src_machine = machineNum;
        int des_machine = machineCNum;
    };
    message outgoing_message;
    addr_info data;
    outgoing_message.type = ADDR_INFO;
    memcpy((void*)outgoing_message.payload, (void*)&data, sizeof(data));


    do {
        //		Enter lines of text
        cout << "> ";
        getline(cin, userInput);

        //		Send to server
        my_socket->SendTCPMessage((char*)&outgoing_message, sizeof(outgoing_message));
        int sendRes = send(sock, userInput.c_str(), userInput.size() + 1, 0);
        if (sendRes == -1)
        {
            cout << "Could not send to server! Whoops!\r\n";
            continue;
        }

        //		Wait for response
        memset(buf, 0, 4096);
        int bytesReceived = recv(sock, buf, 4096, 0);
        if (bytesReceived == -1)
        {
            cout << "There was an error getting response from server\r\n";
        }
        else
        {
            //		Display response
            cout << "SERVER> " << string(buf, bytesReceived) << "\r\n";
        }
    } while(true);

    //	Close the socket
    close(sock);

    return 0;
}
