#include <iostream> 
#include <sys/types.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <string.h>
#include <string>

using namespace std;

int main(){
//create a socket
int listening = socket(AF_INET, SOCK_STREAM, 0);
if (listening == -1){
cerr << "Can't create socket!";
return -1;
}

//bind the socket to a IP/port
sockaddr_in hint;
hint.sin_family = AF_INET; //AF_INET specifies the format which is IPv4
hint.sin_port = htons(54000);
inet_pton(AF_INET, "0.0.0.0", &hint.sin_addr); //binding info, in this case binding to any IP

if (bind(listening, (sockaddr*)&hint, sizeof(hint))==-1){
cerr << "Can't bind to IP/port!";
return -2;
}

//mark the socket for listening
if(listen(listening, SOMAXCONN) == -1){
cerr << "Can't listen!";
return -3;
}

//accept a call from client 
sockaddr_in  client;
socklen_t clientSize = sizeof(client);
char host[NI_MAXHOST];
char svc[NI_MAXSERV];

int clientSocket = accept(listening, (sockaddr*)&client, &clientSize);
if (clientSocket == -1){
cerr << "Problem with client connecting!";
return -4;
}

//close the listening socket
close(listening);

memset(host, 0, NI_MAXHOST);
memset(svc, 0, NI_MAXSERV);

int result = getnameinfo((sockaddr*)&client, sizeof(client), host, NI_MAXHOST, svc, NI_MAXSERV, 0);
if (result){
cout << host << "connected on" << svc << endl; }
else { inet_ntop(AF_INET, &client.sin_addr, host, NI_MAXHOST);
cout << host << "connected on" << ntohs(client.sin_port) << endl; }

//while receiving-displaying message, echo message
char buf[4096];
while (true){
//clear the buffer
memset(buf, 0, 4096);
//wait for message
int bytesRecv = recv(clientSocket, buf, 4096, 0);
if (bytesRecv == -1){
cerr << "There was a connection issue!" << endl;
break;
}
//display message
if (bytesRecv == 0){
cout << "Received: " << string(buf, 0, bytesRecv) << endl;
break;
}
//resend message
send(clientSocket, buf, bytesRecv + 1, 0);
}

//close socket
close(clientSocket);

return 0;
}

