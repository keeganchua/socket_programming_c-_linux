#include <iostream>
#include <sys/types.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <string.h>
#include <string>

using namespace std;

int main(){
    int machineNum = 1; 
    string ipAddress;
    if (machineNum == 1){ipAddress = "192.168.0.115";} 
    else if (machineNum == 2){ipAddress = "192.168.0.114";}
    else { } //machine 3 IP

    int machineSocket = socket(AF_INET, SOCK_STREAM, 0);

    sockaddr_in hint;
    hint.sin_family = AF_INET;
    hint.sin_port = htons(6789);
    inet_pton(AF_INET, ipAddress.c_str(), &hint.sin_addr); 
    bind(machineSocket, (sockaddr*)&hint, sizeof(hint));
   
    int modeNum = 0; 
    do {cout << "Enter 1 to turn on socket, else 0 to turn off socket & return to here again: ";
    cin >> modeNum;
    if (modeNum == 1){

    listen(machineSocket, SOMAXCONN);

    sockaddr_in client;
    socklen_t clientSize = sizeof(client);

    int clientSocket = accept(machineSocket, (sockaddr*)&client, &clientSize);

    char host[NI_MAXHOST];      // client's remote name
    char service[NI_MAXSERV];   // service (i.e. port) the client is connect on
    memset(host, 0, NI_MAXHOST); // same as memset(host, 0, NI_MAXHOST);
    memset(service, 0, NI_MAXSERV);
    if (getnameinfo((sockaddr*)&client, sizeof(client), host, NI_MAXHOST, service, NI_MAXSERV, 0) == 0)
    {cout << host << " connected on port " << service << endl;}
    else{inet_ntop(AF_INET, &client.sin_addr, host, NI_MAXHOST);
        cout << host << " connected on port " << ntohs(client.sin_port) << endl;}
    close(machineSocket);

    char buf[4096];
    int srcappNum, srcmachineNum, desmachineNum;
    read(clientSocket,&srcappNum, sizeof(srcappNum));
    int srcappNum_cb = ntohl(srcappNum);
    cout << srcappNum_cb <<endl;
    read(clientSocket,&srcmachineNum, sizeof(srcmachineNum));
    int srcmachineNum_cb = ntohl(srcmachineNum);
    cout << srcmachineNum_cb <<endl;
    read(clientSocket,&desmachineNum, sizeof(desmachineNum));
    int desmachineNum_cb = ntohl(desmachineNum);
    cout << desmachineNum_cb <<endl;
        
    memset(buf, 0, 4096);
     
    int bytesReceived = recv(clientSocket, buf, 4096, 0);

    if (bytesReceived == 0){cout << "Client disconnected " << endl;}

    cout << string(buf, 0, bytesReceived) << endl;
    
    //send(clientSocket, buf, bytesReceived + 1, 0);   // Echo message back to client
        
    close(clientSocket);
    // based on desmachineNum_cb if not reach pls connect this middleware to that middleware
    
    } else {
    continue;
    }
    } while (true);

    return 0;
}
