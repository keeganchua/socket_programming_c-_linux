#include <iostream>
#include <sys/types.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <string.h>
#include <string>

using namespace std;

int main()
{
    // differentiate machines (available machines: 1, 2 & 3)
    int machineNum = 1; // current machine: 1
    string ipAddress;
    if (machineNum == 1){
        ipAddress = "192.168.0.115";
    } else if (machineNum == 2){
        ipAddress = "192.168.0.114";
    } else {
        cout << "This is Machine 3 please change the machineNum!" << endl;
    }

    // create a socket
    int listening = socket(AF_INET, SOCK_STREAM, 0);

    // bind the ip address and port to a socket
    sockaddr_in hint;
    hint.sin_family = AF_INET;
    hint.sin_port = htons(54000);
    inet_pton(AF_INET, ipAddress.c_str(), &hint.sin_addr); //binding info
    bind(listening, (sockaddr*)&hint, sizeof(hint));
    
    // choose operation of socket
    int modeNum = 0; // default socket is off & waiting for a response
    do {
    cout << "Enter 1 to turn on socket, else 0 to turn off socket & return to here again: ";
    cin >> modeNum;
    if (modeNum == 1){

    // tell Winsock the socket is for listening
    listen(listening, SOMAXCONN);

    // wait for a connection
    sockaddr_in client;
    socklen_t clientSize = sizeof(client);

    int clientSocket = accept(listening, (sockaddr*)&client, &clientSize);

    char host[NI_MAXHOST];      // client's remote name
    char service[NI_MAXSERV];   // service (i.e. port) the client is connect on

    memset(host, 0, NI_MAXHOST); // same as memset(host, 0, NI_MAXHOST);
    memset(service, 0, NI_MAXSERV);

    if (getnameinfo((sockaddr*)&client, sizeof(client), host, NI_MAXHOST, service, NI_MAXSERV, 0) == 0)
    {
        cout << host << " connected on port " << service << endl;
    }
    else
    {
        inet_ntop(AF_INET, &client.sin_addr, host, NI_MAXHOST);
        cout << host << " connected on port " << ntohs(client.sin_port) << endl;
    }

    // close listening socket
    close(listening);

    // While loop: accept and echo message back to client
    char buf[4096];

    while (true)
    {
        memset(buf, 0, 4096);

        // Wait for client to send data
        int bytesReceived = recv(clientSocket, buf, 4096, 0);
        if (bytesReceived == -1)
        {
            cerr << "Error in recv(). Quitting" << endl;
            break;
        }

        if (bytesReceived == 0)
        {
            cout << "Client disconnected " << endl;
            break;
        }

        cout << string(buf, 0, bytesReceived) << endl;

        // Echo message back to client
        send(clientSocket, buf, bytesReceived + 1, 0);
    }

    // Close the socket
    close(clientSocket);
    
    ////// relay message to destination app base on application layer info
    } else {
    continue;
    }
    } while (true);

    return 0;
}
